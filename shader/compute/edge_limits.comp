#version 430

struct SamplePoint
{
    vec4 pos;
};

struct SampleLimits
{
    int samples;
    int nearest_z;
    int farthest_z;
    int max_samples;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};
layout(std430, binding = 1) restrict writeonly buffer sample_output
{
    SamplePoint output_sample[];
};
layout(std430, binding = 2) coherent buffer sample_limits
{
    SampleLimits limits[1];
};

uniform mat4 view;
uniform int work_group_offset;
uniform int max_sample_points;

vec4 read(highp uint index, highp uint offset)
{
    return input_sample[index + offset].pos;
}

void write(highp uint index, highp uint offset, vec4 pos)
{
    output_sample[index + offset].pos = pos;
}

void main() {
    highp uint offset = (gl_WorkGroupID.x + work_group_offset) * max_sample_points;
    highp uint current_read_index = 0;
    highp uint current_write_index = 0;

    int last_nearest_z = -1000000;
    int last_farthest_z = 1000000;

    vec4 first_point = read(0, offset);
    vec4 last_point = read(int(first_point.w) - 1, offset);

    float is_used = 1.0;
    do {
        vec4 next_point = read(current_read_index++, offset);
        vec4 view_sample = view * vec4(next_point.xyz, 1.0);
        float scaled_view_z = view_sample.z * 1000.0;
        int next_view_z = int(scaled_view_z);
        is_used = next_point.w;

        // compare with cached value first
        if (last_nearest_z < next_view_z) {
            // update cached value and eventually set new nearest
            last_nearest_z = atomicMax(limits[0].nearest_z, next_view_z);
            if (last_nearest_z < next_view_z) last_nearest_z = next_view_z;
        }

        // compare with cached value first
        if (last_farthest_z > next_view_z) {
            // update cached value and eventually set new nearest
            last_farthest_z = atomicMin(limits[0].farthest_z, next_view_z);
            if (last_farthest_z > next_view_z) last_farthest_z = next_view_z;
        }
    } while (is_used >= 1.0);

    atomicMax(limits[0].max_samples, int(first_point.w));
    atomicAdd(limits[0].samples, int(first_point.w));
}