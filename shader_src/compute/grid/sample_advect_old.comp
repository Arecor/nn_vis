#version 430

struct SamplePoint
{
    vec4 pos;
};

struct DensityGrid
{
    int overall_density;
    int density_0;
    int density_1;
    int density_2;
    int density_3;
    int density_4;
    int density_5;
    int density_6;
    int density_7;
    int density_8;
    int density_9;
    int fill;
};

struct EdgeData
{
    float samples;
    float start_edge_count;
    float end_edge_count;
    float importance;
    float start_importance_length;
    float end_importance_length;
    float start_importance;
    float end_importance;
    float start_importance_0;
    float start_importance_1;
    float start_importance_2;
    float start_importance_3;
    float start_importance_4;
    float start_importance_5;
    float start_importance_6;
    float start_importance_7;
    float start_importance_8;
    float start_importance_9;
    float end_importance_0;
    float end_importance_1;
    float end_importance_2;
    float end_importance_3;
    float end_importance_4;
    float end_importance_5;
    float end_importance_6;
    float end_importance_7;
    float end_importance_8;
    float end_importance_9;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};

layout(std140, binding = 1) writeonly buffer sample_output
{
    SamplePoint output_sample[];
};

layout(std140, binding = 2) restrict readonly buffer edge_data
{
    EdgeData edge[];
};

layout(std140, binding = 3) restrict readonly buffer density_grid
{
    DensityGrid density[];
};

uniform int work_group_offset;
uniform int max_sample_points;
uniform int slice_count;
uniform int slice_size;
uniform int current_buffer;

uniform float advect_strength;

uniform ivec3 grid_cell_count;
uniform vec3 grid_cell_size;
uniform vec3 grid_bounding_min;

ivec3 gridIndex(vec3 position)
{
    return ivec3(int(floor((position.x - grid_bounding_min.x)/grid_cell_size.x)),
    int(floor((position.y - grid_bounding_min.y)/grid_cell_size.y)),
    int(floor((position.z - grid_bounding_min.z)/grid_cell_size.z)));
}

vec3 gridDirection(ivec3 index, vec3 position)
{
    float x = sign((position.x - grid_bounding_min.x)/grid_cell_size.x - (float(index.x)) - 0.5);
    if (x == 0.0) x = 1.0;
    float y = sign((position.y - grid_bounding_min.y)/grid_cell_size.x - (float(index.y)) - 0.5);
    if (y == 0.0) y = 1.0;
    float z = sign((position.z - grid_bounding_min.z)/grid_cell_size.x - (float(index.z)) - 0.5);
    if (z == 0.0) z = 1.0;
    return vec3(x, y, z);
}

vec4 read(highp uint index)
{
    return input_sample[index].pos;
}

EdgeData readEdge(highp uint index)
{
    return edge[int(floor(index/max_sample_points))];
}

void write(highp uint index, vec4 pos)
{
    output_sample[index].pos = pos;
}

float readGridIndex(ivec3 index)
{
    highp int original_index = index.x + index.y * grid_cell_count.x + index.z * grid_cell_count.x * grid_cell_count.y;
    return density[original_index - current_buffer * slice_count * slice_size].overall_density;
}

vec4 getGradient(ivec3 grid_index, vec3 grid_direction)
{
    float current_density = readGridIndex(grid_index);
    float gradient_x = (readGridIndex(ivec3(grid_index.x + int(grid_direction.x), grid_index.y, grid_index.z)) - current_density) * grid_direction.x;
    float gradient_y = (readGridIndex(ivec3(grid_index.x, grid_index.y + int(grid_direction.y), grid_index.z)) - current_density) * grid_direction.y;
    float gradient_z = (readGridIndex(ivec3(grid_index.x, grid_index.y, grid_index.z + int(grid_direction.z))) - current_density) * grid_direction.z;
    vec3 calc_gradient = vec3(gradient_x, gradient_y, gradient_z);
    float strength = length(calc_gradient);

    strength = max(strength, 0.00001);
    calc_gradient = calc_gradient / strength;
    return vec4(calc_gradient, strength);
}

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;

    vec4 sample_data = read(index);
    EdgeData current_edge = readEdge(index);
    if (sample_data.w == 1.0) {
        ivec3 grid_index = gridIndex(sample_data.xyz);
        if (grid_index.z >= current_buffer * slice_count && grid_index.z < (current_buffer + 1) * slice_count)
        {
            vec3 gradient_direction = vec3(0.0, 0.0, 0.0);
            highp float overall_strength = 0.0;

            /*float first_inter_x = clamp((sample_data.x - grid_bounding_min.x)/grid_cell_size.x - float(grid_index.x), 0.0, 1.0);
            float first_inter_y = clamp((sample_data.y - grid_bounding_min.y)/grid_cell_size.y - float(grid_index.y), 0.0, 1.0);
            float first_inter_z = clamp((sample_data.z - grid_bounding_min.z)/grid_cell_size.z - float(grid_index.z), 0.0, 1.0);
            float[2] inter_x = { 1.0 - first_inter_x, first_inter_x };
            float[2] inter_y = { 1.0 - first_inter_y, first_inter_y };
            float[2] inter_z = { 1.0 - first_inter_z, first_inter_z };

            for (int ix = 0; ix <= 1; ix++)
            {
                for (int iy = 0; iy <= 1; iy++)
                {
                    for (int iz = 0; iz <= 1; iz++)
                    {
                        int gradient_index = grid_index.x + ix + (grid_index.y + iy) * grid_cell_count.x + (grid_index.z - current_buffer * slice_count + iz) * grid_cell_count.x * grid_cell_count.y;
                        GradientGrid current_grid = gradient[gradient_index];
                        if (current_grid.strength > 0.0) {
                            gradient_direction += current_grid.normalized_gradient * current_grid.strength * inter_x[ix] * inter_y[iy] * inter_z[iz];
                        }
                        overall_strength += current_grid.strength;
                    }
                }
            }
            gradient_direction = normalize(gradient_direction);*/

            vec4 gradient = getGradient(grid_index, gridDirection(grid_index, sample_data.xyz));
            gradient_direction = gradient.xyz;
            overall_strength = gradient.w;

            if (overall_strength >= 1.0) {
                sample_data = vec4(sample_data.x + gradient_direction.x * advect_strength, sample_data.y + gradient_direction.y * advect_strength, sample_data.z + gradient_direction.z * advect_strength, sample_data.w);
            }
            write(index, sample_data);
        }
    } else {
        write(index, sample_data);
    }
}