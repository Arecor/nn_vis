#version 430
struct SamplePoint
{
    vec4 pos;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};
layout(binding = 1) restrict writeonly buffer sample_output
{
    SamplePoint output_sample[];
};

uniform int work_group_offset;
uniform int max_sample_points;
uniform float sample_length;

vec4 read(highp uint index, highp uint offset)
{
    return input_sample[index + offset].pos;
}

void write(highp uint index, highp uint offset, vec4 pos)
{
    output_sample[index + offset].pos = pos;
}

void main() {
    highp uint offset = (gl_WorkGroupID.x + work_group_offset) * max_sample_points;
    highp uint current_read_index = 0;
    highp uint current_write_index = 1;

    vec4 first_point = read(current_read_index++, offset);
    vec3 before_last_written_point = first_point.xyz;
    vec3 last_written_point = first_point.xyz;
    vec4 last_point = read(int(first_point.w), offset);


    // initialize variables used over the next loop
    vec3 next_point = last_written_point;
    float is_used = 1.0;
    float distance_to_next = 0.0;

    do {
        vec4 next_point_data = read(current_read_index++, offset);
        next_point = next_point_data.xyz;
        is_used = next_point_data.w;
        distance_to_next = distance(next_point, last_written_point);

        while (distance_to_next >= sample_length * 0.99) {
            float t = sample_length / distance_to_next;
            t = clamp(t, 0.0, 1.0);
            before_last_written_point = last_written_point;
            last_written_point = (last_written_point * (1.0 - t) + next_point * t);
            write(current_write_index++, offset, vec4(last_written_point.xyz, 1.0));
            distance_to_next = distance(next_point, last_written_point);
        }
    } while (is_used > 0.0);

    float distance_to_last = distance(last_written_point, last_point.xyz);
    if (distance_to_last < 0.3 * sample_length) {
        current_write_index--;
    } else if (distance_to_last < 0.7 * sample_length) {
        current_write_index--;
        last_written_point = (before_last_written_point + last_point.xyz)/2.0;
        write(current_write_index++, offset, vec4(last_written_point.xyz, 1.0));
    }

    // always store last edge point and mark it as last with w-value -1
    write(current_write_index++, offset, vec4(next_point.xyz, -1.0));

    // store the first point with sum of all points as w value
    write(0, offset, vec4(first_point.xyz, float(current_write_index)));

    while (current_write_index <= first_point.w) {
        write(current_write_index++, offset, vec4(0.0, 0.0, 0.0, 0.0));
    }
}